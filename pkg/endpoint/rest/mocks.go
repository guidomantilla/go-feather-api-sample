// Code generated by MockGen. DO NOT EDIT.
// Source: ../pkg/endpoint/rest/types.go

// Package rest is a generated GoMock package.
package rest

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthPrincipalEndpoint is a mock of AuthPrincipalEndpoint interface.
type MockAuthPrincipalEndpoint struct {
	ctrl     *gomock.Controller
	recorder *MockAuthPrincipalEndpointMockRecorder
}

// MockAuthPrincipalEndpointMockRecorder is the mock recorder for MockAuthPrincipalEndpoint.
type MockAuthPrincipalEndpointMockRecorder struct {
	mock *MockAuthPrincipalEndpoint
}

// NewMockAuthPrincipalEndpoint creates a new mock instance.
func NewMockAuthPrincipalEndpoint(ctrl *gomock.Controller) *MockAuthPrincipalEndpoint {
	mock := &MockAuthPrincipalEndpoint{ctrl: ctrl}
	mock.recorder = &MockAuthPrincipalEndpointMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthPrincipalEndpoint) EXPECT() *MockAuthPrincipalEndpointMockRecorder {
	return m.recorder
}

// ChangePassword mocks base method.
func (m *MockAuthPrincipalEndpoint) ChangePassword(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ChangePassword", ctx)
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockAuthPrincipalEndpointMockRecorder) ChangePassword(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockAuthPrincipalEndpoint)(nil).ChangePassword), ctx)
}

// Create mocks base method.
func (m *MockAuthPrincipalEndpoint) Create(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Create", ctx)
}

// Create indicates an expected call of Create.
func (mr *MockAuthPrincipalEndpointMockRecorder) Create(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAuthPrincipalEndpoint)(nil).Create), ctx)
}

// Delete mocks base method.
func (m *MockAuthPrincipalEndpoint) Delete(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", ctx)
}

// Delete indicates an expected call of Delete.
func (mr *MockAuthPrincipalEndpointMockRecorder) Delete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAuthPrincipalEndpoint)(nil).Delete), ctx)
}

// FindByUsername mocks base method.
func (m *MockAuthPrincipalEndpoint) FindByUsername(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FindByUsername", ctx)
}

// FindByUsername indicates an expected call of FindByUsername.
func (mr *MockAuthPrincipalEndpointMockRecorder) FindByUsername(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUsername", reflect.TypeOf((*MockAuthPrincipalEndpoint)(nil).FindByUsername), ctx)
}

// FindCurrent mocks base method.
func (m *MockAuthPrincipalEndpoint) FindCurrent(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FindCurrent", ctx)
}

// FindCurrent indicates an expected call of FindCurrent.
func (mr *MockAuthPrincipalEndpointMockRecorder) FindCurrent(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCurrent", reflect.TypeOf((*MockAuthPrincipalEndpoint)(nil).FindCurrent), ctx)
}

// Update mocks base method.
func (m *MockAuthPrincipalEndpoint) Update(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", ctx)
}

// Update indicates an expected call of Update.
func (mr *MockAuthPrincipalEndpointMockRecorder) Update(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAuthPrincipalEndpoint)(nil).Update), ctx)
}

// VerifyResource mocks base method.
func (m *MockAuthPrincipalEndpoint) VerifyResource(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "VerifyResource", ctx)
}

// VerifyResource indicates an expected call of VerifyResource.
func (mr *MockAuthPrincipalEndpointMockRecorder) VerifyResource(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyResource", reflect.TypeOf((*MockAuthPrincipalEndpoint)(nil).VerifyResource), ctx)
}
