// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: resources/proto/api.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ApiSample_Login_FullMethodName        = "/ApiSample/Login"
	ApiSample_GetPrincipal_FullMethodName = "/ApiSample/GetPrincipal"
)

// ApiSampleClient is the client API for ApiSample service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiSampleClient interface {
	Login(ctx context.Context, in *Principal, opts ...grpc.CallOption) (*GetPrincipalResponse, error)
	GetPrincipal(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPrincipalResponse, error)
}

type apiSampleClient struct {
	cc grpc.ClientConnInterface
}

func NewApiSampleClient(cc grpc.ClientConnInterface) ApiSampleClient {
	return &apiSampleClient{cc}
}

func (c *apiSampleClient) Login(ctx context.Context, in *Principal, opts ...grpc.CallOption) (*GetPrincipalResponse, error) {
	out := new(GetPrincipalResponse)
	err := c.cc.Invoke(ctx, ApiSample_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiSampleClient) GetPrincipal(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPrincipalResponse, error) {
	out := new(GetPrincipalResponse)
	err := c.cc.Invoke(ctx, ApiSample_GetPrincipal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiSampleServer is the server API for ApiSample service.
// All implementations must embed UnimplementedApiSampleServer
// for forward compatibility
type ApiSampleServer interface {
	Login(context.Context, *Principal) (*GetPrincipalResponse, error)
	GetPrincipal(context.Context, *emptypb.Empty) (*GetPrincipalResponse, error)
	mustEmbedUnimplementedApiSampleServer()
}

// UnimplementedApiSampleServer must be embedded to have forward compatible implementations.
type UnimplementedApiSampleServer struct {
}

func (UnimplementedApiSampleServer) Login(context.Context, *Principal) (*GetPrincipalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedApiSampleServer) GetPrincipal(context.Context, *emptypb.Empty) (*GetPrincipalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrincipal not implemented")
}
func (UnimplementedApiSampleServer) mustEmbedUnimplementedApiSampleServer() {}

// UnsafeApiSampleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiSampleServer will
// result in compilation errors.
type UnsafeApiSampleServer interface {
	mustEmbedUnimplementedApiSampleServer()
}

func RegisterApiSampleServer(s grpc.ServiceRegistrar, srv ApiSampleServer) {
	s.RegisterService(&ApiSample_ServiceDesc, srv)
}

func _ApiSample_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Principal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiSampleServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiSample_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiSampleServer).Login(ctx, req.(*Principal))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiSample_GetPrincipal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiSampleServer).GetPrincipal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiSample_GetPrincipal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiSampleServer).GetPrincipal(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiSample_ServiceDesc is the grpc.ServiceDesc for ApiSample service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiSample_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ApiSample",
	HandlerType: (*ApiSampleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _ApiSample_Login_Handler,
		},
		{
			MethodName: "GetPrincipal",
			Handler:    _ApiSample_GetPrincipal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resources/proto/api.proto",
}
