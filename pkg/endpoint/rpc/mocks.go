// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/raven/Workspace/personal/go-feather-api-sample/pkg/endpoint/rpc/api_grpc.pb.go

// Package rpc is a generated GoMock package.
package rpc

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockApiSampleClient is a mock of ApiSampleClient interface.
type MockApiSampleClient struct {
	ctrl     *gomock.Controller
	recorder *MockApiSampleClientMockRecorder
}

// MockApiSampleClientMockRecorder is the mock recorder for MockApiSampleClient.
type MockApiSampleClientMockRecorder struct {
	mock *MockApiSampleClient
}

// NewMockApiSampleClient creates a new mock instance.
func NewMockApiSampleClient(ctrl *gomock.Controller) *MockApiSampleClient {
	mock := &MockApiSampleClient{ctrl: ctrl}
	mock.recorder = &MockApiSampleClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiSampleClient) EXPECT() *MockApiSampleClientMockRecorder {
	return m.recorder
}

// GetPrincipal mocks base method.
func (m *MockApiSampleClient) GetPrincipal(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Principal, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPrincipal", varargs...)
	ret0, _ := ret[0].(*Principal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrincipal indicates an expected call of GetPrincipal.
func (mr *MockApiSampleClientMockRecorder) GetPrincipal(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrincipal", reflect.TypeOf((*MockApiSampleClient)(nil).GetPrincipal), varargs...)
}

// Login mocks base method.
func (m *MockApiSampleClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Login", varargs...)
	ret0, _ := ret[0].(*LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockApiSampleClientMockRecorder) Login(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockApiSampleClient)(nil).Login), varargs...)
}

// MockApiSampleServer is a mock of ApiSampleServer interface.
type MockApiSampleServer struct {
	ctrl     *gomock.Controller
	recorder *MockApiSampleServerMockRecorder
}

// MockApiSampleServerMockRecorder is the mock recorder for MockApiSampleServer.
type MockApiSampleServerMockRecorder struct {
	mock *MockApiSampleServer
}

// NewMockApiSampleServer creates a new mock instance.
func NewMockApiSampleServer(ctrl *gomock.Controller) *MockApiSampleServer {
	mock := &MockApiSampleServer{ctrl: ctrl}
	mock.recorder = &MockApiSampleServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiSampleServer) EXPECT() *MockApiSampleServerMockRecorder {
	return m.recorder
}

// GetPrincipal mocks base method.
func (m *MockApiSampleServer) GetPrincipal(arg0 context.Context, arg1 *emptypb.Empty) (*Principal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrincipal", arg0, arg1)
	ret0, _ := ret[0].(*Principal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrincipal indicates an expected call of GetPrincipal.
func (mr *MockApiSampleServerMockRecorder) GetPrincipal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrincipal", reflect.TypeOf((*MockApiSampleServer)(nil).GetPrincipal), arg0, arg1)
}

// Login mocks base method.
func (m *MockApiSampleServer) Login(arg0 context.Context, arg1 *LoginRequest) (*LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockApiSampleServerMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockApiSampleServer)(nil).Login), arg0, arg1)
}

// mustEmbedUnimplementedApiSampleServer mocks base method.
func (m *MockApiSampleServer) mustEmbedUnimplementedApiSampleServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedApiSampleServer")
}

// mustEmbedUnimplementedApiSampleServer indicates an expected call of mustEmbedUnimplementedApiSampleServer.
func (mr *MockApiSampleServerMockRecorder) mustEmbedUnimplementedApiSampleServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedApiSampleServer", reflect.TypeOf((*MockApiSampleServer)(nil).mustEmbedUnimplementedApiSampleServer))
}

// MockUnsafeApiSampleServer is a mock of UnsafeApiSampleServer interface.
type MockUnsafeApiSampleServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeApiSampleServerMockRecorder
}

// MockUnsafeApiSampleServerMockRecorder is the mock recorder for MockUnsafeApiSampleServer.
type MockUnsafeApiSampleServerMockRecorder struct {
	mock *MockUnsafeApiSampleServer
}

// NewMockUnsafeApiSampleServer creates a new mock instance.
func NewMockUnsafeApiSampleServer(ctrl *gomock.Controller) *MockUnsafeApiSampleServer {
	mock := &MockUnsafeApiSampleServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeApiSampleServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeApiSampleServer) EXPECT() *MockUnsafeApiSampleServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedApiSampleServer mocks base method.
func (m *MockUnsafeApiSampleServer) mustEmbedUnimplementedApiSampleServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedApiSampleServer")
}

// mustEmbedUnimplementedApiSampleServer indicates an expected call of mustEmbedUnimplementedApiSampleServer.
func (mr *MockUnsafeApiSampleServerMockRecorder) mustEmbedUnimplementedApiSampleServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedApiSampleServer", reflect.TypeOf((*MockUnsafeApiSampleServer)(nil).mustEmbedUnimplementedApiSampleServer))
}
