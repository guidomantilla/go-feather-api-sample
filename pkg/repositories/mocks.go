// Code generated by MockGen. DO NOT EDIT.
// Source: ../pkg/repositories/types.go

// Package repositories is a generated GoMock package.
package repositories

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/guidomantilla/go-feather-api-sample/pkg/models"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// DeleteAccessControlList mocks base method.
func (m *MockRepository) DeleteAccessControlList(ctx context.Context, acl *models.AuthAccessControlList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessControlList", ctx, acl)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccessControlList indicates an expected call of DeleteAccessControlList.
func (mr *MockRepositoryMockRecorder) DeleteAccessControlList(ctx, acl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessControlList", reflect.TypeOf((*MockRepository)(nil).DeleteAccessControlList), ctx, acl)
}

// DeleteResource mocks base method.
func (m *MockRepository) DeleteResource(ctx context.Context, resource *models.AuthResource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResource", ctx, resource)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResource indicates an expected call of DeleteResource.
func (mr *MockRepositoryMockRecorder) DeleteResource(ctx, resource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResource", reflect.TypeOf((*MockRepository)(nil).DeleteResource), ctx, resource)
}

// DeleteRole mocks base method.
func (m *MockRepository) DeleteRole(ctx context.Context, role *models.AuthRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", ctx, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockRepositoryMockRecorder) DeleteRole(ctx, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockRepository)(nil).DeleteRole), ctx, role)
}

// DeleteUser mocks base method.
func (m *MockRepository) DeleteUser(ctx context.Context, user *models.AuthUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockRepositoryMockRecorder) DeleteUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockRepository)(nil).DeleteUser), ctx, user)
}

// FindAccessControlList mocks base method.
func (m *MockRepository) FindAccessControlList(ctx context.Context, acl *models.AuthAccessControlList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAccessControlList", ctx, acl)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindAccessControlList indicates an expected call of FindAccessControlList.
func (mr *MockRepositoryMockRecorder) FindAccessControlList(ctx, acl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAccessControlList", reflect.TypeOf((*MockRepository)(nil).FindAccessControlList), ctx, acl)
}

// FindPrincipalByUsernameAndApplication mocks base method.
func (m *MockRepository) FindPrincipalByUsernameAndApplication(ctx context.Context, principal *models.AuthPrincipal) ([]models.AuthPrincipal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPrincipalByUsernameAndApplication", ctx, principal)
	ret0, _ := ret[0].([]models.AuthPrincipal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPrincipalByUsernameAndApplication indicates an expected call of FindPrincipalByUsernameAndApplication.
func (mr *MockRepositoryMockRecorder) FindPrincipalByUsernameAndApplication(ctx, principal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPrincipalByUsernameAndApplication", reflect.TypeOf((*MockRepository)(nil).FindPrincipalByUsernameAndApplication), ctx, principal)
}

// FindResource mocks base method.
func (m *MockRepository) FindResource(ctx context.Context, resource *models.AuthResource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindResource", ctx, resource)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindResource indicates an expected call of FindResource.
func (mr *MockRepositoryMockRecorder) FindResource(ctx, resource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindResource", reflect.TypeOf((*MockRepository)(nil).FindResource), ctx, resource)
}

// FindRole mocks base method.
func (m *MockRepository) FindRole(ctx context.Context, role *models.AuthRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRole", ctx, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindRole indicates an expected call of FindRole.
func (mr *MockRepositoryMockRecorder) FindRole(ctx, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRole", reflect.TypeOf((*MockRepository)(nil).FindRole), ctx, role)
}

// FindUser mocks base method.
func (m *MockRepository) FindUser(ctx context.Context, user *models.AuthUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindUser indicates an expected call of FindUser.
func (mr *MockRepositoryMockRecorder) FindUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUser", reflect.TypeOf((*MockRepository)(nil).FindUser), ctx, user)
}

// SaveAccessControlList mocks base method.
func (m *MockRepository) SaveAccessControlList(ctx context.Context, acl *models.AuthAccessControlList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAccessControlList", ctx, acl)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAccessControlList indicates an expected call of SaveAccessControlList.
func (mr *MockRepositoryMockRecorder) SaveAccessControlList(ctx, acl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAccessControlList", reflect.TypeOf((*MockRepository)(nil).SaveAccessControlList), ctx, acl)
}

// SaveResource mocks base method.
func (m *MockRepository) SaveResource(ctx context.Context, resource *models.AuthResource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveResource", ctx, resource)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveResource indicates an expected call of SaveResource.
func (mr *MockRepositoryMockRecorder) SaveResource(ctx, resource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveResource", reflect.TypeOf((*MockRepository)(nil).SaveResource), ctx, resource)
}

// SaveRole mocks base method.
func (m *MockRepository) SaveRole(ctx context.Context, role *models.AuthRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRole", ctx, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRole indicates an expected call of SaveRole.
func (mr *MockRepositoryMockRecorder) SaveRole(ctx, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRole", reflect.TypeOf((*MockRepository)(nil).SaveRole), ctx, role)
}

// SaveUser mocks base method.
func (m *MockRepository) SaveUser(ctx context.Context, user *models.AuthUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUser indicates an expected call of SaveUser.
func (mr *MockRepositoryMockRecorder) SaveUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockRepository)(nil).SaveUser), ctx, user)
}
